"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/highstock-tradingview",{

/***/ "./utils/indicators.js":
/*!*****************************!*\
  !*** ./utils/indicators.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateAngleBetweenPoints\": function() { return /* binding */ calculateAngleBetweenPoints; },\n/* harmony export */   \"getPivotPoints\": function() { return /* binding */ getPivotPoints; },\n/* harmony export */   \"registerCustomIndicators\": function() { return /* binding */ registerCustomIndicators; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/src/_to_consumable_array.mjs */ \"./node_modules/@swc/helpers/src/_to_consumable_array.mjs\");\n/**\n * Custom technical indicators for Highcharts\n * \n * This module contains:\n * - An angle calculator that respects the price-to-bar ratio\n * - Pivot point detection for identifying market tops and bottoms\n */ /**\n * Calculate the angle between two points, accounting for price-to-bar ratio\n * @param {Object} p1 - Starting point {x, y}\n * @param {Object} p2 - Ending point {x, y}\n * @param {Number} priceToBarRatio - The ratio of price units to bar units\n * @returns {Number} - Angle in degrees\n */ \nvar calculateAngleBetweenPoints = function(p1, p2) {\n    var priceToBarRatio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n    // Calculate the adjusted height based on the ratio\n    var dx = p2.x - p1.x;\n    var dy = (p2.y - p1.y) * priceToBarRatio;\n    // Calculate angle in radians and convert to degrees\n    var angleRad = Math.atan2(dy, dx);\n    var angleDeg = angleRad * (180 / Math.PI);\n    return angleDeg;\n};\n/**\n * Detect pivot points (highs and lows) in price data according to classical technical analysis\n * @param {Array} xData - Array of x values (timestamps or indices)\n * @param {Array} yData - Array of y values (prices)\n * @param {Object} params - Parameters { lookback }\n * @returns {Object} - Arrays of pivot high and low points\n */ var getPivotPoints = function(xData, yData) {\n    var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    var _Math, _Math1;\n    var lookback = params.lookback || 5;\n    // Need at least 2*lookback+1 points to detect pivots\n    if (yData.length < 2 * lookback + 1) {\n        console.warn(\"Not enough data points (\".concat(yData.length, \") to detect pivots (need \").concat(2 * lookback + 1, \")\"));\n        return {\n            highs: [],\n            lows: []\n        };\n    }\n    var pivotHighs = [];\n    var pivotLows = [];\n    // Debug data range to ensure values make sense\n    var minPrice = (_Math = Math).min.apply(_Math, (0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(yData));\n    var maxPrice = (_Math1 = Math).max.apply(_Math1, (0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(yData));\n    console.log(\"Data range: min=\".concat(minPrice.toFixed(2), \", max=\").concat(maxPrice.toFixed(2), \", points=\").concat(yData.length));\n    // Iterate through the data, skipping the first and last 'lookback' points\n    for(var i = lookback; i < yData.length - lookback; i++){\n        // Get high and low for the current bar - for OHLC data\n        // If using close prices only, both will be the same value\n        var currentHigh = Array.isArray(yData[i]) ? yData[i][1] : yData[i]; // High\n        var currentLow = Array.isArray(yData[i]) ? yData[i][2] : yData[i]; // Low\n        // Check for pivot high - must be higher than ALL bars in the window\n        var isPivotHigh = true;\n        for(var j = i - lookback; j <= i + lookback; j++){\n            // Skip the current bar\n            if (j === i) continue;\n            // Get high of comparison bar\n            var compareHigh = Array.isArray(yData[j]) ? yData[j][1] : yData[j];\n            // If ANY bar in window has a higher high, this is not a pivot high\n            if (compareHigh >= currentHigh) {\n                isPivotHigh = false;\n                break;\n            }\n        }\n        // Check for pivot low - must be lower than ALL bars in the window\n        var isPivotLow = true;\n        for(var j1 = i - lookback; j1 <= i + lookback; j1++){\n            // Skip the current bar\n            if (j1 === i) continue;\n            // Get low of comparison bar\n            var compareLow = Array.isArray(yData[j1]) ? yData[j1][2] : yData[j1];\n            // If ANY bar in window has a lower low, this is not a pivot low\n            if (compareLow <= currentLow) {\n                isPivotLow = false;\n                break;\n            }\n        }\n        // Save pivot points with their coordinates\n        if (isPivotHigh) {\n            pivotHighs.push({\n                x: xData[i],\n                y: currentHigh,\n                index: i\n            });\n        }\n        if (isPivotLow) {\n            pivotLows.push({\n                x: xData[i],\n                y: currentLow,\n                index: i\n            });\n        }\n    }\n    console.log(\"Found \".concat(pivotHighs.length, \" highs and \").concat(pivotLows.length, \" lows in \").concat(yData.length, \" data points\"));\n    return {\n        highs: pivotHighs,\n        lows: pivotLows\n    };\n};\n/**\n * Register custom indicators with Highcharts\n * @param {Object} Highcharts - The Highcharts instance\n */ var registerCustomIndicators = function(Highcharts) {\n    var tryAlternativePivotMethod = // Fallback method that uses a different approach\n    function tryAlternativePivotMethod(chart, lookback) {\n        console.log(\"Trying alternative pivot detection method...\");\n        try {\n            // Get data from chart's rendered points\n            var points = [];\n            var mainSeries = null;\n            // Find the main price series\n            for(var i = 0; i < chart.series.length; i++){\n                var series = chart.series[i];\n                if (series.type === \"candlestick\" || series.type === \"ohlc\") {\n                    mainSeries = series;\n                    break;\n                }\n            }\n            if (!mainSeries || !mainSeries.points || mainSeries.points.length === 0) {\n                console.error(\"Could not find rendered points in any suitable series\");\n                return {\n                    highs: [],\n                    lows: []\n                };\n            }\n            // Extract data from rendered points\n            var xData = [];\n            var yData = [];\n            mainSeries.points.forEach(function(point) {\n                if (point && point.x && (point.close !== undefined || point.y !== undefined)) {\n                    xData.push(point.x);\n                    yData.push(point.close !== undefined ? point.close : point.y);\n                }\n            });\n            if (xData.length === 0) {\n                console.error(\"No usable data points found in rendered series\");\n                return {\n                    highs: [],\n                    lows: []\n                };\n            }\n            console.log(\"Processing \".concat(xData.length, \" data points from rendered series\"));\n            // Find pivot points \n            var ref = getPivotPoints(xData, yData, {\n                lookback: lookback\n            }), highs = ref.highs, lows = ref.lows;\n            console.log(\"Found \".concat(highs.length, \" highs and \").concat(lows.length, \" lows from rendered data\"));\n            // Remove any existing pivot series\n            chart.series.forEach(function(series) {\n                if (series.options.id === \"pivot-highs\" || series.options.id === \"pivot-lows\") {\n                    series.remove(false);\n                }\n            });\n            // Add pivot high markers\n            if (highs.length > 0) {\n                chart.addSeries({\n                    type: \"scatter\",\n                    name: \"Pivot Highs\",\n                    id: \"pivot-highs\",\n                    color: \"#21b838\",\n                    marker: {\n                        symbol: \"triangle\",\n                        radius: 8,\n                        fillColor: \"rgba(33, 184, 56, 0.9)\",\n                        lineColor: \"#ffffff\",\n                        lineWidth: 2\n                    },\n                    data: highs.map(function(point) {\n                        return [\n                            point.x,\n                            point.y\n                        ];\n                    }),\n                    showInLegend: false,\n                    tooltip: {\n                        pointFormat: '<span style=\"color:#21b838\">‚óè</span> Pivot High: <b>{point.y}</b><br/>'\n                    },\n                    zIndex: 10\n                }, false);\n            }\n            // Add pivot low markers\n            if (lows.length > 0) {\n                chart.addSeries({\n                    type: \"scatter\",\n                    name: \"Pivot Lows\",\n                    id: \"pivot-lows\",\n                    color: \"#d91e1e\",\n                    marker: {\n                        symbol: \"triangle-down\",\n                        radius: 8,\n                        fillColor: \"rgba(217, 30, 30, 0.9)\",\n                        lineColor: \"#ffffff\",\n                        lineWidth: 2\n                    },\n                    data: lows.map(function(point) {\n                        return [\n                            point.x,\n                            point.y\n                        ];\n                    }),\n                    showInLegend: false,\n                    tooltip: {\n                        pointFormat: '<span style=\"color:#d91e1e\">‚óè</span> Pivot Low: <b>{point.y}</b><br/>'\n                    },\n                    zIndex: 10\n                }, false);\n            }\n            // Redraw the chart\n            chart.redraw();\n            return {\n                highs: highs,\n                lows: lows\n            };\n        } catch (error) {\n            console.error(\"Error in alternative pivot method:\", error);\n            return {\n                highs: [],\n                lows: []\n            };\n        }\n    };\n    if (!Highcharts) {\n        console.error(\"Highcharts instance is required to register custom indicators\");\n        return;\n    }\n    // Add direct data approach for pivot points\n    Highcharts.createPivotPoints = function registerCustomIndicators(chart, seriesId) {\n        var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        // Safety check - make sure we have access to the chart\n        if (!chart) {\n            console.error(\"Invalid chart instance\");\n            return {\n                highs: [],\n                lows: []\n            };\n        }\n        var lookback = params.lookback || 5;\n        console.log(\"Creating pivot points with direct data approach, lookback=\".concat(lookback));\n        try {\n            // Get source data directly from the userOptions\n            var sourceData = chart.userOptions.series && chart.userOptions.series[0] && chart.userOptions.series[0].data;\n            if (!sourceData || !Array.isArray(sourceData) || sourceData.length === 0) {\n                console.error(\"No source data available in chart options\");\n                return {\n                    highs: [],\n                    lows: []\n                };\n            }\n            console.log(\"Processing \".concat(sourceData.length, \" data points from source data\"));\n            // Create separate arrays for timestamp, highs, and lows\n            var xData = [];\n            var highData = [];\n            var lowData = [];\n            // Extract high and low values properly from OHLC format\n            sourceData.forEach(function(point) {\n                if (Array.isArray(point) && point.length >= 4) {\n                    // Standard OHLC format [timestamp, open, high, low, close]\n                    xData.push(point[0]); // Timestamp\n                    highData.push(point[2]); // High\n                    lowData.push(point[3]); // Low\n                } else if (typeof point === \"object\" && point.x != null) {\n                    // Object format {x, open, high, low, close}\n                    xData.push(point.x);\n                    highData.push(point.high != null ? point.high : point.y);\n                    lowData.push(point.low != null ? point.low : point.y);\n                } else {\n                    // Simple price format\n                    xData.push(point[0]);\n                    highData.push(point[1]);\n                    lowData.push(point[1]);\n                }\n            });\n            // Find pivot highs using high values\n            var pivotHighs = [];\n            for(var i = lookback; i < highData.length - lookback; i++){\n                var isPivotHigh = true;\n                var currentHigh = highData[i];\n                for(var j = i - lookback; j <= i + lookback; j++){\n                    if (j === i) continue; // Skip the current bar\n                    if (highData[j] >= currentHigh) {\n                        isPivotHigh = false;\n                        break;\n                    }\n                }\n                if (isPivotHigh) {\n                    pivotHighs.push({\n                        x: xData[i],\n                        y: currentHigh,\n                        index: i\n                    });\n                }\n            }\n            // Find pivot lows using low values\n            var pivotLows = [];\n            for(var i1 = lookback; i1 < lowData.length - lookback; i1++){\n                var isPivotLow = true;\n                var currentLow = lowData[i1];\n                for(var j1 = i1 - lookback; j1 <= i1 + lookback; j1++){\n                    if (j1 === i1) continue; // Skip the current bar\n                    if (lowData[j1] <= currentLow) {\n                        isPivotLow = false;\n                        break;\n                    }\n                }\n                if (isPivotLow) {\n                    pivotLows.push({\n                        x: xData[i1],\n                        y: currentLow,\n                        index: i1\n                    });\n                }\n            }\n            console.log(\"Found \".concat(pivotHighs.length, \" highs and \").concat(pivotLows.length, \" lows using true OHLC data\"));\n            // Remove any existing pivot series\n            chart.series.forEach(function(series) {\n                if (series.options.id === \"pivot-highs\" || series.options.id === \"pivot-lows\") {\n                    series.remove(false);\n                }\n            });\n            // Add pivot high markers\n            if (pivotHighs.length > 0) {\n                chart.addSeries({\n                    type: \"scatter\",\n                    name: \"Pivot Highs\",\n                    id: \"pivot-highs\",\n                    color: \"#21b838\",\n                    marker: {\n                        symbol: \"triangle\",\n                        radius: 8,\n                        fillColor: \"rgba(33, 184, 56, 0.9)\",\n                        lineColor: \"#ffffff\",\n                        lineWidth: 2\n                    },\n                    data: pivotHighs.map(function(point) {\n                        return [\n                            point.x,\n                            point.y\n                        ];\n                    }),\n                    showInLegend: false,\n                    tooltip: {\n                        pointFormat: '<span style=\"color:#21b838\">‚óè</span> Pivot High: <b>{point.y}</b><br/>'\n                    },\n                    zIndex: 10\n                }, false);\n                console.log(\"Added pivot highs:\", pivotHighs.map(function(h) {\n                    return h.y.toFixed(2);\n                }).join(\", \"));\n            }\n            // Add pivot low markers\n            if (pivotLows.length > 0) {\n                chart.addSeries({\n                    type: \"scatter\",\n                    name: \"Pivot Lows\",\n                    id: \"pivot-lows\",\n                    color: \"#d91e1e\",\n                    marker: {\n                        symbol: \"triangle-down\",\n                        radius: 8,\n                        fillColor: \"rgba(217, 30, 30, 0.9)\",\n                        lineColor: \"#ffffff\",\n                        lineWidth: 2\n                    },\n                    data: pivotLows.map(function(point) {\n                        return [\n                            point.x,\n                            point.y\n                        ];\n                    }),\n                    showInLegend: false,\n                    tooltip: {\n                        pointFormat: '<span style=\"color:#d91e1e\">‚óè</span> Pivot Low: <b>{point.y}</b><br/>'\n                    },\n                    zIndex: 10\n                }, false);\n                console.log(\"Added pivot lows:\", pivotLows.map(function(l) {\n                    return l.y.toFixed(2);\n                }).join(\", \"));\n            }\n            // Redraw the chart\n            chart.redraw();\n            return {\n                highs: pivotHighs,\n                lows: pivotLows\n            };\n        } catch (error) {\n            console.error(\"Error creating pivot points with direct data approach:\", error);\n            // Fallback to another method if the direct approach fails\n            return tryAlternativePivotMethod(chart, lookback);\n        }\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/indicators.js\n"));

/***/ })

});